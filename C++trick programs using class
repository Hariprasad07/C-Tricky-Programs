//call by value using swapp example
==type one==
---------------------------------------
#include<iostream>
using namespace std;

int a,b;

class Swap
{
	 
	public:
	void getdata();
	void swapv(int x,int y);
	void display();
};

void Swap::getdata()
{
    cout<<"Enter The value of A : ";
    cin>>a;
    cout<<"\nEnter The value of B : ";
    cin>>b;
}

void Swap::swapv(int x,int y)
{
    int t=x;
    x=y;
	y=t;    
}

void Swap::display()
{
	cout<<"a="<<a<<"\t b="<<b;
}

int main()
{
	Swap s;
	s.getdata();
	cout<<"\nBefore swap:\n";
	s.display();
	s.swapv(a,b);
	cout<<"\n\nAfter swap:\n";
	s.display();
	return 0;
}

==type two==
-------------------
/*Swapping using Call-by-value*/
 
#include<iostream>
using namespace std;
 
//function to swap the Numbers: 
void swap(int i , int j) 
{
    int temp=j;
    j=i;
    i=temp;
}
 
int main()
{
    int a,b; //variable to store the Numbers:
    cout<<"Enter The value of A : ";
    cin>>a;
    cout<<"\nEnter The value of B : ";
    cin>>b;
 
    cout<<"\n Before swaping the value is : A = "<<a<<" B = "<<b<<endl;
 
    swap(a,b); //function call-by-value.
    cout<<" After swaping the value is A = :"<<a<<" B = "<<b<<endl;     
 
    return 0;
}

output:
Enter The value of A : 10
Enter The value of B : 20
Before swap:
a=10     b=20
After swap:
a=10     b=20

Note:
In the above example, did you notice that the value of A and B is same after and before
swapping. Because the value of the actual parameter is copied to the formal parameter 
for the purpose of executing the function's code. Since it is working on a copy of the 
actual parameter, the function's execution cannot affect the value of the actual parameter 
owned by the value.


/*Swapping using Call-by-pointer*/
---------------------------------- 
#include<iostream>
using namespace std;
 
//function to swap the Numbers:
void swap(int *i , int *j)  
{
    int temp=*j;
    *j=*i;
    *i=temp;    
}
 
main()
{
    int a,b; //variable to store the Numbers:
    cout<<"Enter The value of A : ";
    cin>>a;
    cout<<"\nEnter The value of B : ";
    cin>>b;
 
    cout<<"\n Before saping the value is : A = "<<a<<" B = "<<b<<endl;
 
    swap(a,b); //function call-by-Pointer.
    cout<<" After swaping the value is A = :"<<a<<" B = "<<b<<endl;     
 
    return 0;
}

/*Swapping using Call-by-Reference*/
------------------------------------ 
#include<iostream>
using namespace std;
 
//function to swap the Numbers: 
void swap(int &i , int &j) 
{
    int temp=j;
    j=i;
    i=temp;
}
 
main()
{
    int a,b; //variable to store the Numbers:
    cout<<"Enter The value of A : ";
    cin>>a;
    cout<<"\nEnter The value of B : ";
    cin>>b;
 
    cout<<"\n Before swapping the value is : A = "<<a<<" B = "<<b<<endl;
 
    swap(a,b); //function call-by-Reference.
    cout<<" After swapping the value is A = :"<<a<<" B = "<<b<<endl;     
 
    return 0;
}


//Inline Functions
------------------
#include<iostream>
using namespace std;
int a,b;
inline int add()
{
	return (a+b);
}

int main()
{
   cout<<"First value is:";	
   cin>>a;
   cout<<"Second value is:";
   cin>>b;
   cout<<"Addition value is:"<<add();	
   return 0;	
}
//inline second example
-----------------------
#include<iostream>
using namespace std;

inline int cube(int s)
{
	return s*s*s;
}

int main()
{
   int a;	
   cout<<"Enter the value: ";
   cin>>a;
   cout<<"value is:"<<cube(a);	
   return 0;	
}


//search an element using array
--------------------------------
#include <iostream>
using namespace std;
   
int main(){
    int input[100], count, i, num;
       
    cout << "Enter Number of Elements in Array\n";
    cin >> count;
     
    cout << "Enter " << count << " numbers \n";
      
    // Read array elements
    for(i = 0; i < count; i++){
        cin >> input[i];
    }
      
    cout << "Enter a number to serach in Array\n";
    cin >> num;
      
    // search num in inputArray from index 0 to elementCount-1 
    for(i = 0; i < count; i++){
        if(input[i] == num){
            cout << "Element found at index " << i;
            break;
        }
    }
      
    if(i == count){
        cout  << "Element Not Present in Input Array\n";
    }
 
    return 0;
}


//Simple interest
-------------------
#include<iostream>
using namespace std;

float SI(int p,int t,float r=7.5)
{
	return((p*t*r)/100);
} 

int main()
{
	int principle,time;
	float si;
	
	cout<<"Enter the principle amount"<<endl;
	cin>>principle;
    cout<<"Enter the time"<<endl;
	cin>>time;
	
	si=SI(principle,time);
	cout<<"simple interest is: "<<si;
	
	return 0;
}
